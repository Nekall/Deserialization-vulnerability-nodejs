require('dotenv').config();
const serialize = require("serialize-javascript");
const bodyParser = require("body-parser");
const express = require("express");
const fs = require('fs');
const app = express();
const PORT = 3030;
const { FLAG1, FLAG2, PASSWORD } = process.env;

app.use(express.static(__dirname));
app.use(bodyParser.urlencoded({ extended: false }));
// Styles
app.get("/global.css", (req, res) => {
    res.sendFile(__dirname + "/global.css");
})

// ###### Unsafe Deserialization - JavaScript Object Injection ######
app.get("/", (req, res) => {
    res.sendFile(__dirname + "/page/login.html");
});

app.post("/login", (req, res) => {
    const { username, password } = req.body;

    if (username === "admin" && password === PASSWORD) {
        const user = {
            username: "admin",
            role: "admin"
        };

        const serializedUser = serialize(user);
        res.redirect("/profile?user=" + encodeURIComponent(serializedUser));
    } else if (username === "user" && password === "password") {
        const user = {
            username: username,
            role: "default"
        };

        const serializedUser = serialize(user);
        res.redirect("/profile?user=" + encodeURIComponent(serializedUser));
    } else {
        res.redirect(req.get("referer"));
    }
});

app.set("view engine","ejs"); 
app.get("/profile", (req, res) => {
    const { user } = req.query;

    let message;
    if (user) {
        try {
            const deserializedUser = eval('(' + user + ')');
            if (deserializedUser.role === 'admin') {
                return res.render(__dirname + "/views/dashboard-admin.ejs", {flag: FLAG1});
            } else {
                return res.sendFile(__dirname + "/page/dashboard-user.html");
            }
        } catch (error) {
            console.error(error);
            message = "/!\\ Error occurred /!\\";
        }
    } else {
        message = "/!\\ User information missing /!\\";
    }

    res.write(message);
    return res.end();
});
// ####################################


// ############# SSTI ################

app.set("view engine", "custom");
app.set("views", __dirname + "/views");
app.engine("custom", (filePath, options, callback) => {
    fs.readFile(filePath, "utf8", (err, content) => {
        if (err) return callback(new Error(err));

        // Setup answer
        let answer;

        try {
            answer = options.answer.length < 5 ? "The Ultimate Question of Life, the Universe and Everything ?" : eval(options.answer);
        } catch (error) {
            answer = options.answer;
        }

        // Setup error
        let error = options.answer.length < 5 ? "The answer must be at least 5 characters long" : "";

        // Setup flag
        let flag = "";
        if (options.answer.length > 4) {
            try {
                if (eval(options.answer) === 42) {
                    flag = FLAG2;
                }
            } catch (err) {
                error = options.answer === "The Ultimate Question of Life, the Universe and Everything ?" ? "" : "Oops, failed"
            }
        }

        let rendered = content.replace("{{ answer }}", answer).replace("{{ error }}", error).replace("{{ flag }}", flag);
        return callback(null, rendered);
    });
});

app.get("/question", (req, res) => {
    const answer = req.query.answer || "The Ultimate Question of Life, the Universe and Everything ?";
    res.render("template.custom", { answer });
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});